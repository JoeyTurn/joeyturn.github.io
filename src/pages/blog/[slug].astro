---
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

// Build-time: enumerate blog pages and ALSO compute prev/next within a series.
export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft || data.onlylink);

  // group by series; if no series -> unique key so it won't page
  const groups = new Map<string, CollectionEntry<"blog">[]>();
  for (const p of posts) {
    const key = p.data.series ?? `__noseries__${p.slug}`;
    (groups.get(key) ?? groups.set(key, []).get(key)!).push(p);
  }

  // sort each group (by seriesOrder, then pubDate, then title) and emit paths
  const paths: Array<{
    params: { slug: string };
    props: {
      entry: CollectionEntry<"blog">;
      prev?: CollectionEntry<"blog">;
      next?: CollectionEntry<"blog">;
    };
  }> = [];

  for (const [, arr] of groups) {
    arr.sort((a, b) => {
      const ao = a.data.seriesOrder ?? a.data.pubDate?.getTime() ?? 0;
      const bo = b.data.seriesOrder ?? b.data.pubDate?.getTime() ?? 0;
      if (ao !== bo) return ao - bo;
      return a.data.title.localeCompare(b.data.title);
    });

    for (let i = 0; i < arr.length; i++) {
      const entry = arr[i];
      paths.push({
        params: { slug: entry.slug },
        props: { entry, prev: arr[i - 1], next: arr[i + 1] },
      });
    }
  }

  return paths;
}

// Receive the entry and neighbors directly
const { entry, prev, next } = Astro.props as {
  entry: CollectionEntry<"blog">;
  prev?: CollectionEntry<"blog">;
  next?: CollectionEntry<"blog">;
};

// simple date formatter
function formatDate(d?: Date) {
  return d
    ? d.toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" })
    : "";
}

const { Content } = await entry.render();
---
<BaseLayout title={`${entry.data.title} – Blog`} noindex={Boolean(entry.data.onlylink)}>
  <h1>{entry.data.title}</h1>
  <h3>{entry.data.description && (
    <p class="subtitle">{entry.data.description}</p>
  )}</h3>
  {entry.data.pubDate && <p class="meta">{formatDate(entry.data.pubDate)}</p>}
  <Content />

  {(entry.data.series && (prev || next)) && (
    <nav class="pager" aria-label={`Series: ${entry.data.series}`}>
      <div>{prev && <a href={`/blog/${prev.slug}/`}>← {prev.data.title}</a>}</div>
      <div>{next && <a href={`/blog/${next.slug}/`}>{next.data.title} →</a>}</div>
    </nav>
  )}
</BaseLayout>

<style>
  /* local styling; uses your global --rule var from the layout */
  .pager{
    display:flex; justify-content:space-between; gap:12px;
    margin-top:40px; padding-top:16px;
    border-top:1px solid var(--rule);
  }
</style>
